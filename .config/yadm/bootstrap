#!/bin/sh

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

#yadm sparse-checkout set --no-cone '/*' '!README.md' '!LICENSE'

# Update the push url.
ssh_url=$(yadm remote get-url origin | sed 's|https://github.com/|git@github.com:|')
yadm remote set-url --push origin "$ssh_url"

# Clone sub-repos
# Each entry contains: URL BRANCH SUBDIRECTORY
sub_repos='https://github.com/honeycut1/kickstart.nvim.git johnh  .config/nvim
https://github.com/honeycut1/wezterm-config.git            johnh  .config/wezterm
https://github.com/honeycut1/karabiner-windows-mode.git    johnh  .config/karabiner/karabiner-windows-mode
https://github.com/tmux-plugins/tmux-logging               master .tmux/tmux-logging
https://github.com/tmux-plugins/tmux-yank                  master .tmux/tmux-yank'


# Process each repository entry
echo "$sub_repos" | while IFS= read -r entry; do
    # Skip empty lines
    [ -z "$entry" ] && continue
    
    # Parse the entry into individual components using set
    set -- $entry
    url="$1"
    branch="$2"
    subdir="$3"

    # Construct the full path
    target_path="${HOME}/$subdir"

    printf "\n${YELLOW}================================================${RESET}\n"
    printf "${BOLD}Processing: %s${RESET}\n" "$url"
    printf "    Branch: %s\n" "$branch"
    printf "    ${YELLOW}Target: %s${RESET}\n" "$target_path"

    # Clone the repository to the target directory
    if [ ! -d "$target_path" ]; then
        printf "${CYAN}${BOLD}Cloning %s to %s...${RESET}\n" "$url" "$target_path"
        git clone -b "$branch" "$url" "$target_path"
        if [ $? -eq 0 ]; then
            printf "${GREEN}✓ Clone successful${RESET}\n\n"
        fi

        # Update the push url.
        ssh_url=$(echo "$url" | sed 's|https://github.com/|git@github.com:|')
        (set -x; cd "$target_path" && git remote set-url --push origin "$ssh_url")
    else
        printf "Directory %s already exists, checking for changes...\n" "$target_path"

        # Check for working or staged changes
        if [ -n "$(cd "$target_path" && git status --porcelain 2>/dev/null)" ]; then
            printf "${RED}${BOLD}WARNING: Repository has uncommitted changes. Skipping update.${RESET}\n"
            printf "${RED}Please commit or stash changes in %s before running bootstrap again.${RESET}\n" "$target_path"
            continue
        fi

        printf "${CYAN}No uncommitted changes found, pulling latest changes...${RESET}\n"
        (set -x; cd "$target_path" && git checkout "$branch" && git pull --rebase)
        if [ $? -eq 0 ]; then
            printf "${GREEN}✓ Update successful${RESET}\n"
        fi
    fi
done

